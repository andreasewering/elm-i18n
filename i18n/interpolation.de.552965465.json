["Wenn du den gleichen Wert an mehreren Stellen platzieren willst, gib ihnen einfach den gleichen Namen.\nZum Beispiel: {H0code|\"\\{person\\}, \\{person\\}\"|} wird eine Funktion mit der Signatur {H0code|I18n -> String -> String|} generieren\nobwohl zwei Platzhalter spezifiziert wurden. Wenn die Funktion zur Laufzeit mit {H0code|Evan|} aufgerufen wird,\nkommt {H0code|Evan, Evan|} raus.","Doppelte Platzhalter Schlüssel","Fluent nutzt als Interpolationssyntax Curly Bracket Syntax mit einem Twist.\nDa die Syntax auch für andere Features genutzt werden kann muss die Variable die interpoliert werden soll mit einem \"$\" begonnen werden.\nWenn du beispielsweise einen Wert in {H0code|\"Hello, !\"|} einfügen willst für die Person die du grüßen möchtest, könntest du\n{H0code|\"Hello, \\{$person\\}!\"|} schreiben. Für eine echte öffnende geschweifte Klammer nutze Fluents String Literals {H0code|\\{ \"...\" \\}|} zum Escapen.","Wenn du den generierten Code für den Beispiel Input inspizierst, könnten dir die unterschiedlichen\nTypsignaturen verglichen mit der vorigen Seite auffallen. Statt der gewöhnlichen {H0code|I18n -> String|} Signatur,\nhat Travelm-Agency eine Funktion mit dem Typ {H0code|I18n -> String -> String|} für die Übersetzung für {H0code|greeting|}\nund ein Funktion mit dem Typ {H0code|I18n -> \\{ day : String, todo : String \\} -> String|}\nfür die Übersetzung für {H0code|plan|} generiert.\nWenn man sich ihre Definitionen in der Inputdatei ansieht, macht das eine Menge Sinn.\nDie {H0code|greeting|} Übersetzung signalisiert dass ein Wert an die markierte Stelle platziert wird und die\n{H0code|plan|} platziert gleich zwei. Beliebige Anzahlen von interpolierten Werten sind unterstützt.\nDu kannst gerne ausprobieren wie sich der Compiler verhält wenn du Platzhalter im Eingabefenster hinzufügst oder löschst.","Generierter Code","Interpolation","Mnnchmal brauchen verschiedene Sprachen mehr oder weniger Platzhalter als andere, oder in einer anderen Reihenfolge.\nTravelm-Agency hat damit kein Problem. Für eine Übersetzung werden zur Laufzeit immer eine Anzahl Werte korrepondierend zur Vereinigung der\nspezifizierten Platzhalter über alle Sprachen hinweg benötigt. Der generierte Code kümmert sich dann darum die Werte an die korrekten\nStellen zu platzieren.","Inkonsistente Platzhalter","JSON gibt keine Syntax für Platzhalter vor. Wir haben die bekannte Curly Bracket Syntax gewählt:\nWenn du beispielsweise einen Wert in {H0code|\"Hello, !\"|} einfügen willst für die Person die du grüßen möchtest, kannst du \n{H0code|\"Hello, \\{person\\}!\"|} schreiben. Für eine echte öffnende geschweifte Klammer kann man Backslash zum Escapen nutzen.","Diese Seite ist über das Feature Interpolation: Die Ersetzung eines Platzhalters innerhalb eines\nTextes durch einen Wert zur Laufzeit.","Properties gibt auch keine Syntax für Platzhalter vor. Wie bei JSON haben wir Curly Bracket Syntax gewählt:\nWenn du beispielsweise einen Wert in {H0code|\"Hello, !\"|} einfügen willst für die Person die du grüßen möchtest, kannst du \n{H0code|\"Hello, \\{person\\}!\"|} schreiben. Für eine echte öffnende geschweifte Klammer kann man Anführungszeichen zum Escapen nutzen."]