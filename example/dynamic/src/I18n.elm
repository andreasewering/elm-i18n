module I18n exposing (I18n, Language(..), decodeDemo, decodeMessages, escapedChars, greeting, init, languageFromString, languageSwitchInfo, languageToFileName_demo, languageToFileName_messages, languageToString, languages, loadDemo, loadMessages, order, sentOn, static)

{-| This file was generated by elm-i18n version 2.3.2.


-}

import Array
import Http
import Intl
import Json.Decode
import List
import Maybe
import Parser exposing ((|.), (|=))
import Result
import String
import Tuple


type I18n
    = I18n { demo : Array.Array String, messages : Array.Array String }


{-| Initialize an (empty) `I18n` instance. This is useful on startup when no JSON was `load`ed yet.


-}
init : I18n
init =
    I18n { demo = Array.empty, messages = Array.empty }


fallbackValue_ : String
fallbackValue_ =
    "..."


{-| Replaces all placeholder expressions in a string in order with the given values


-}
replacePlaceholders : List String -> String -> String
replacePlaceholders list_ str_ =
    List.foldl
        (\val_ ( i_, acc_ ) -> ( i_ + 1, String.replace ("{" ++ String.fromInt i_ ++ "}") val_ acc_ ))
        ( 0, str_ )
        list_
        |> Tuple.second


{-| Enumeration of the supported languages


-}
type Language
    = De
    | En
    | Fr


{-| A list containing all `Language`s


-}
languages : List Language
languages =
    [ De, En, Fr ]


{-| Convert a `Language` to its `String` representation.


-}
languageToString : Language -> String
languageToString lang_ =
    case lang_ of
        De ->
            "de"

        En ->
            "en"

        Fr ->
            "fr"


{-| Maybe parse a `Language` from a `String`. 
This only considers the keys given during compile time, if you need something like 'en-US' to map to the correct `Language`,
you should write your own parsing function.


-}
languageFromString : String -> Maybe Language
languageFromString lang_ =
    case lang_ of
        "de" ->
            Just De

        "en" ->
            Just En

        "fr" ->
            Just Fr

        _ ->
            Nothing


sentOn : I18n -> String -> String
sentOn (I18n { demo }) date_ =
    case Array.get 0 demo of
        Just translation_ ->
            replacePlaceholders [ date_ ] translation_

        Nothing ->
            fallbackValue_


escapedChars : I18n -> String
escapedChars (I18n { messages }) =
    case Array.get 0 messages of
        Just translation_ ->
            translation_

        Nothing ->
            fallbackValue_


greeting : I18n -> String -> String
greeting (I18n { messages }) name_ =
    case Array.get 1 messages of
        Just translation_ ->
            replacePlaceholders [ name_ ] translation_

        Nothing ->
            fallbackValue_


languageSwitchInfo : I18n -> String -> String
languageSwitchInfo (I18n { messages }) currentLanguage_ =
    case Array.get 2 messages of
        Just translation_ ->
            replacePlaceholders [ currentLanguage_ ] translation_

        Nothing ->
            fallbackValue_


order : I18n -> { a | language : String, name : String } -> String
order (I18n { messages }) placeholders_ =
    case Array.get 3 messages of
        Just translation_ ->
            replacePlaceholders [ placeholders_.language, placeholders_.name ] translation_

        Nothing ->
            fallbackValue_


static : I18n -> String
static (I18n { messages }) =
    case Array.get 4 messages of
        Just translation_ ->
            translation_

        Nothing ->
            fallbackValue_


{-| Decode an `I18n` from Json. Make sure this is *only* used on the files generated by this package.


-}
decodeDemo : Json.Decode.Decoder (I18n -> I18n)
decodeDemo =
    Json.Decode.array Json.Decode.string |> Json.Decode.map (\arr_ (I18n i18n_) -> I18n { i18n_ | demo = arr_ })


{-| 
Load translations for identifier 'demo' and a `Language` from the server. This is a simple `Http.get`, if you need more customization,
you can use the `decoder` instead. Pass the path and a callback to your `update` function, for example

    load { language = De, path = "/i18n", onLoad = GotTranslations }

will make a `GET` request to /i18n/demo.de.374540512.json and will call GotTranslations with the decoded response.


-}
loadDemo : { language : Language, path : String, onLoad : Result Http.Error (I18n -> I18n) -> msg } -> Cmd msg
loadDemo opts_ =
    Http.get
        { expect = Http.expectJson opts_.onLoad decodeDemo
        , url = opts_.path ++ "/" ++ languageToFileName_demo opts_.language
        }


languageToFileName_demo : Language -> String
languageToFileName_demo lang_ =
    case lang_ of
        De ->
            "demo.de.374540512.json"

        En ->
            "demo.en.1090705688.json"

        Fr ->
            "demo.fr.3212935786.json"


{-| Decode an `I18n` from Json. Make sure this is *only* used on the files generated by this package.


-}
decodeMessages : Json.Decode.Decoder (I18n -> I18n)
decodeMessages =
    Json.Decode.array Json.Decode.string |> Json.Decode.map (\arr_ (I18n i18n_) -> I18n { i18n_ | messages = arr_ })


{-| 
Load translations for identifier 'messages' and a `Language` from the server. This is a simple `Http.get`, if you need more customization,
you can use the `decoder` instead. Pass the path and a callback to your `update` function, for example

    load { language = De, path = "/i18n", onLoad = GotTranslations }

will make a `GET` request to /i18n/messages.de.326622083.json and will call GotTranslations with the decoded response.


-}
loadMessages : { language : Language, path : String, onLoad : Result Http.Error (I18n -> I18n) -> msg } -> Cmd msg
loadMessages opts_ =
    Http.get
        { expect = Http.expectJson opts_.onLoad decodeMessages
        , url = opts_.path ++ "/" ++ languageToFileName_messages opts_.language
        }


languageToFileName_messages : Language -> String
languageToFileName_messages lang_ =
    case lang_ of
        De ->
            "messages.de.326622083.json"

        En ->
            "messages.en.3536557519.json"

        Fr ->
            "messages.fr.2552204741.json"


{-| Replaces all placeholders with the given arguments using the Intl API on the marked spots


-}
replacePlaceholders : I18n -> List String -> String -> String
replacePlaceholders ( _, intl_, lang_ ) argList_ =
    let
        args_ =
            Array.fromList argList_

        getArg_ n_ =
            Array.get n_ args_ |> Maybe.withDefault ""

        numberFormatUnsafe_ n_ parsedArgString_ =
            Maybe.withDefault "" <|
                Intl.unsafeAccess intl_ <|
                    "[\"NumberFormat\",[" ++ parsedArgString_ ++ "],\"format\",[" ++ getArg_ n_ ++ "]]"

        dateFormatUnsafe_ n_ parsedArgString_ =
            Maybe.withDefault "" <|
                Intl.unsafeAccess intl_ <|
                    "[\"DateTimeFormat\",[" ++ parsedArgString_ ++ "],\"format\",[" ++ getArg_ n_ ++ "]]"

        parser_ =
            Parser.loop "" <|
                \state_ ->
                    Parser.oneOf [ Parser.succeed ((++) state_ >> Parser.Loop) |. Parser.token "{" |= Parser.oneOf [] ]
    in
    Parser.run parser_ >> Result.toMaybe >> Maybe.withDefault ""
