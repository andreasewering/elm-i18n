module I18n exposing (I18n, Language(..), de, en, escapedChars, fr, greeting, init, languageFromString, languageSwitchInfo, languageToString, languages, load, order, sentOn, static)

{-| This file was generated by elm-i18n version 2.3.2.


-}

import Intl
import Json.Encode
import Time


type alias I18n =
    ( I18n_, Intl.Intl )


type alias I18n_ =
    { escapedChars_ : String
    , greeting_ : String -> String
    , languageSwitchInfo_ : String -> String
    , order_ : { language : String, name : String } -> String
    , sentOn_ : Intl.Intl -> Time.Posix -> String
    , static_ : String
    }


{-| Initialize an i18n instance based on a language and access to the Intl API


-}
init : Intl.Intl -> Language -> I18n
init intl_ lang_ =
    case lang_ of
        De ->
            ( de, intl_ )

        En ->
            ( en, intl_ )

        Fr ->
            ( fr, intl_ )


{-| Switch to another i18n instance based on a language


-}
load : Language -> I18n -> I18n
load lang_ ( _, intl_ ) =
    init intl_ lang_


{-| `I18n` instance containing all values for the language De


-}
de : I18n_
de =
    { escapedChars_ = "Spezielle Chars \" ' { werden korrekt dargestellt"
    , greeting_ = \name_ -> "Hallo " ++ name_
    , languageSwitchInfo_ =
        \currentLanguage_ -> "Du kannst hier deine Sprache von " ++ currentLanguage_ ++ " zu einer anderen ändern."
    , order_ =
        \data_ ->
            "Die Reihenfolge der benannten Platzhalter bleibt konsistent auch wenn die Sprachen sich ändern! Name: "
                ++ data_.name
                ++ ", Sprache: "
                ++ data_.language
    , sentOn_ =
        \intl_ date_ ->
            "Gesendet am "
                ++ Intl.formatDateTime
                    intl_
                    { time = date_
                    , language = "de"
                    , args = [ ( "hour12", Json.Encode.string "true" ), ( "dateStyle", Json.Encode.string "full" ) ]
                    }
    , static_ = "Statischer Text"
    }


{-| `I18n` instance containing all values for the language En


-}
en : I18n_
en =
    { escapedChars_ = "Escaped characters \" ' { are displayed correctly"
    , greeting_ = \name_ -> "Hello " ++ name_
    , languageSwitchInfo_ =
        \currentLanguage_ -> "You may switch languages from " ++ currentLanguage_ ++ " to another one here."
    , order_ =
        \data_ ->
            "The order of the named placeholder keys stays consistent even when switching languages! Language: "
                ++ data_.language
                ++ ", Name: "
                ++ data_.name
                ++ "."
    , sentOn_ =
        \intl_ date_ ->
            "Sent on "
                ++ Intl.formatDateTime
                    intl_
                    { time = date_
                    , language = "en"
                    , args = [ ( "timeStyle", Json.Encode.string "long" ), ( "dateStyle", Json.Encode.string "full" ) ]
                    }
    , static_ = "Static text"
    }


{-| `I18n` instance containing all values for the language Fr


-}
fr : I18n_
fr =
    { escapedChars_ = "Les caractères spéciaux \" ' { s'affichent correctement"
    , greeting_ = \name_ -> "Bonjour " ++ name_
    , languageSwitchInfo_ =
        \currentLanguage_ -> "Vous pouvez changer votre langue de " ++ currentLanguage_ ++ " à une autre ici"
    , order_ =
        \data_ ->
            "L'ordre des espaces réservés nommés reste cohérent même si les langues changent! Name: "
                ++ data_.name
                ++ ", Langue: "
                ++ data_.language
    , sentOn_ = \intl_ date_ -> "Envoyé sur " ++ Intl.formatDateTime intl_ { time = date_, language = "fr", args = [] }
    , static_ = "Texte statique"
    }


{-| Enumeration of the supported languages


-}
type Language
    = De
    | En
    | Fr


{-| A list containing all `Language`s


-}
languages : List Language
languages =
    [ De, En, Fr ]


{-| Convert a `Language` to its `String` representation.


-}
languageToString : Language -> String
languageToString lang_ =
    case lang_ of
        De ->
            "de"

        En ->
            "en"

        Fr ->
            "fr"


{-| Maybe parse a `Language` from a `String`. 
This only considers the keys given during compile time, if you need something like 'en-US' to map to the correct `Language`,
you should write your own parsing function.


-}
languageFromString : String -> Maybe Language
languageFromString lang_ =
    case lang_ of
        "de" ->
            Just De

        "en" ->
            Just En

        "fr" ->
            Just Fr

        _ ->
            Nothing


escapedChars : I18n -> String
escapedChars ( i18n_, intl_ ) =
    i18n_.escapedChars_


greeting : I18n -> String -> String
greeting ( i18n_, intl_ ) =
    i18n_.greeting_


languageSwitchInfo : I18n -> String -> String
languageSwitchInfo ( i18n_, intl_ ) =
    i18n_.languageSwitchInfo_


order : I18n -> { language : String, name : String } -> String
order ( i18n_, intl_ ) =
    i18n_.order_


sentOn : I18n -> Time.Posix -> String
sentOn ( i18n_, intl_ ) =
    i18n_.sentOn_ intl_


static : I18n -> String
static ( i18n_, intl_ ) =
    i18n_.static_
