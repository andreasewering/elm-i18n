module I18n exposing (I18n, Language(..), decoder, greeting, init, languageFromString, languageSwitchInfo, languageToString, languages, load)

{-| This file was generated by elm-i18n.


-}

import Http
import Json.Decode
import Json.Decode.Pipeline
import Placeholder.DoubleCurly


type alias I18nInstance =
    { greeting_ : String -> String, languageSwitchInfo_ : String -> String }


type I18n
    = Loaded I18nInstance
    | NotLoaded


init : I18n
init =
    NotLoaded


type Language
    = De
    | En


languages : List Language
languages =
    [ De, En ]


languageToString : Language -> String
languageToString lang_ =
    case lang_ of
        De ->
            "de"

        En ->
            "en"


languageFromString : String -> Maybe Language
languageFromString lang_ =
    case lang_ of
        "de" ->
            Just De

        "en" ->
            Just En

        _ ->
            Nothing


fallbackValue_ : String
fallbackValue_ =
    "..."


decoder : Json.Decode.Decoder I18n
decoder =
    Json.Decode.succeed I18nInstance
        |> Json.Decode.Pipeline.required "0" (stringParserToDecoder Placeholder.DoubleCurly.parsePlaceholderAlph1)
        |> Json.Decode.Pipeline.required "1" (stringParserToDecoder Placeholder.DoubleCurly.parsePlaceholderAlph1)
        |> Json.Decode.map Loaded


load : { language : Language, path : String, onLoad : Result Http.Error I18n -> msg } -> Cmd msg
load opts_ =
    Http.get
        { expect = Http.expectJson opts_.onLoad decoder
        , url = opts_.path ++ "/messages." ++ languageToString opts_.language ++ ".json"
        }


stringParserToDecoder : (String -> Result String a) -> Json.Decode.Decoder a
stringParserToDecoder f =
    Json.Decode.string
        |> Json.Decode.andThen
            (\str ->
                case f str of
                    Ok ok ->
                        Json.Decode.succeed ok

                    Err err ->
                        Json.Decode.fail err
            )


greeting : I18n -> String -> String
greeting i18n_ name_ =
    case i18n_ of
        Loaded instance_ ->
            instance_.greeting_ name_

        NotLoaded ->
            fallbackValue_


languageSwitchInfo : I18n -> String -> String
languageSwitchInfo i18n_ currentLanguage_ =
    case i18n_ of
        Loaded instance_ ->
            instance_.languageSwitchInfo_ currentLanguage_

        NotLoaded ->
            fallbackValue_
